import type { HealthReport } from "@shared/schema";

export async function generatePDFReport(report: HealthReport): Promise<void> {
  try {
    // @ts-ignore - jsPDF is loaded globally
    const { jsPDF } = window.jspdf;
    
    if (!jsPDF) {
      throw new Error("PDF library not loaded");
    }

    const doc = new jsPDF();
    
    // Header
    doc.setFontSize(20);
    doc.setTextColor(37, 99, 235); // Blue color
    doc.text("AI Health Monitor Report", 20, 30);
    
    // Date
    doc.setFontSize(12);
    doc.setTextColor(100, 100, 100);
    doc.text(`Generated on: ${new Date(report.createdAt).toLocaleDateString()}`, 20, 45);
    
    // Wellness Score (large)
    doc.setFontSize(16);
    doc.setTextColor(0, 0, 0);
    doc.text("Overall Wellness Score", 20, 65);
    doc.setFontSize(32);
    doc.setTextColor(16, 185, 129); // Green color
    doc.text(`${report.wellnessScore}/100`, 20, 80);
    
    // Health Metrics
    doc.setFontSize(14);
    doc.setTextColor(0, 0, 0);
    doc.text("Health Metrics", 20, 100);
    
    const metrics = [
      { label: "Heart Rate", value: `${report.heartRate} bpm` },
      { label: "Oxygen Level", value: `${report.oxygenLevel}% SpOâ‚‚` },
      { label: "Blood Sugar", value: `${report.bloodSugar} mg/dL` },
      { label: "Stress Level", value: report.stressLevel },
      { label: "Energy Level", value: report.energyLevel },
      { label: "Detected Mood", value: `${report.detectedMood} (${report.moodConfidence}% confidence)` },
    ];
    
    doc.setFontSize(10);
    let yPosition = 115;
    metrics.forEach((metric) => {
      doc.setTextColor(60, 60, 60);
      doc.text(`${metric.label}:`, 25, yPosition);
      doc.setTextColor(0, 0, 0);
      doc.text(metric.value, 80, yPosition);
      yPosition += 10;
    });
    
    // Recommendations Section
    doc.setFontSize(14);
    doc.setTextColor(0, 0, 0);
    doc.text("Health Recommendations", 20, yPosition + 15);
    
    const recommendations = [
      "Maintain regular exercise routine",
      "Stay hydrated throughout the day",
      "Practice stress management techniques",
      "Get adequate sleep (7-9 hours)",
      "Monitor your vitals regularly"
    ];
    
    doc.setFontSize(10);
    yPosition += 30;
    recommendations.forEach((rec, index) => {
      doc.setTextColor(60, 60, 60);
      doc.text(`${index + 1}. ${rec}`, 25, yPosition);
      yPosition += 8;
    });
    
    // Footer
    doc.setFontSize(8);
    doc.setTextColor(120, 120, 120);
    doc.text("This report is generated by AI Health Monitor for informational purposes only.", 20, 270);
    doc.text("Please consult with healthcare professionals for medical advice.", 20, 280);
    
    // Add face image if available
    if (report.faceImageData) {
      try {
        doc.addImage(report.faceImageData, 'JPEG', 120, 65, 60, 45);
      } catch (error) {
        console.warn("Could not add face image to PDF:", error);
      }
    }
    
    // Download the PDF
    const fileName = `health-report-${new Date(report.createdAt).toISOString().split('T')[0]}.pdf`;
    doc.save(fileName);
    
  } catch (error) {
    console.error("Error generating PDF:", error);
    throw new Error("Failed to generate PDF report");
  }
}

export async function emailPDFReport(report: HealthReport, email: string): Promise<void> {
  // This would typically send the PDF via email
  // For now, we'll generate the PDF and show a message
  await generatePDFReport(report);
  
  // In a real implementation, you would:
  // 1. Generate the PDF on the server
  // 2. Send it via email service (SendGrid, AWS SES, etc.)
  // 3. Return success/failure status
  
  throw new Error("Email functionality not implemented yet");
}
